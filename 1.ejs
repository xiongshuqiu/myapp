const EmployeeShiftSchedule = require('../models/employeeShiftScheduleModel');
const Employee = require('../models/employeeModel');

// (2) 生成新的排班表
const generateUniqueShiftScheduleId = async () => {
  const { startDate, days, startShiftType, startEmployeeId } = req.body;
  const generateUniqueShiftScheduleId = async (req, res) => {
    const { startDate, days, startShiftType, startEmployeeId } = req.body;
  
    // 数据库查询现有的排班表
    const existingShiftSchedules = await ShiftSchedule.find().sort({ shiftScheduleId: -1 });
  
    let newShiftScheduleId;
    if (existingShiftSchedules.length > 0) {
      // 获取最后一个排班表的编号
      const lastId = existingShiftSchedules[0].shiftScheduleId;
      // 提取编号中的数字部分，并增加1
      const numericPart = parseInt(lastId.slice(2)) + 1;
      newShiftScheduleId = `SS${numericPart.toString().padStart(4, '0')}`;
    } else {
      newShiftScheduleId = 'SS0001';
    }
  
    // 获取在岗员工列表
    const activeEmployees = await Employee.find({ status: 'Active' });
  
    // 查找起始员工索引
    const startEmployeeIndex = activeEmployees.findIndex(emp => emp.employeeId === startEmployeeId);
  
    // 班次类型
    const shiftTypes = ['Morning', 'Evening', 'Night'];
    let currentShiftIndex = shiftTypes.indexOf(startShiftType);
  
    // 生成排班表
    for (let i = 0; i < days; i++) {
      const employeeIndex = (startEmployeeIndex + i) % activeEmployees.length;
      const employee = activeEmployees[employeeIndex];
      const shiftType = shiftTypes[currentShiftIndex];
  
      // 计算开始时间和结束时间
      const startTime = new Date(startDate);
      startTime.setHours(startTime.getHours() + (8 * currentShiftIndex));
      const endTime = new Date(startTime);
      endTime.setHours(endTime.getHours() + 8);
  
      const shiftSchedule = new EmployeeShiftSchedule({
        shiftScheduleId: newShiftScheduleId,
        employeeId: employee.employeeId,
        shiftType: shiftType,
        startTime: startTime,
        endTime: endTime
      });
  
      await shiftSchedule.save();
  
      // 班次轮换
      currentShiftIndex = (currentShiftIndex + 1) % shiftTypes.length;
    }
  
    res.status(201).json({ message: 'Shift schedule created successfully' });
  };