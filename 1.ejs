

let shiftCounter = 1; // 初始计数器

async function generateMonthlyShiftSchedule(req, res) {
  const { startDate, days, startShiftType, startEmployeeId } = req.body;
  console.log(startEmployeeId);
  try {
    // 获取状态为 Active 的员工的 employeeId
    const employees = await Employee.find({ status: 'Active' }).select('employeeId');
    const employeeIds = employees.map(emp => emp.employeeId);

    console.log(`Employee IDs: ${employeeIds}`);

    let newShiftScheduleId;
    const existingShiftSchedules = await EmployeeShiftSchedule.find().sort({ shiftScheduleId: -1 });
    if (existingShiftSchedules.length > 0) {
      const lastId = existingShiftSchedules[0].shiftScheduleId;
      const numericPart = parseInt(lastId.slice(2)) + 1;
      newShiftScheduleId = `SS${numericPart.toString().padStart(4, '0')}`;
    } else {
      newShiftScheduleId = 'SS0001';
    }

    const shiftTypes = ['Morning', 'Evening', 'Night'];
    let currentShiftType = startShiftType;
    let startDateTime = new Date(startDate);
    const shiftStartHours = { 'Morning': 8, 'Evening': 16, 'Night': 0 };

    // 调整startDate到起始班次的时间
    startDateTime.setHours(shiftStartHours[currentShiftType], 0, 0, 0);
    let lastEndTime = startDateTime;

    // 生成排班表
    for (let i = 0; i < days * 3; i++) { // 确保所有天数的所有班次都会排到
      const employeeIndex = (parseInt(startEmployeeId.slice(2)) + i) % employeeIds.length;
      const employeeId = employeeIds[employeeIndex];

      const startTime = new Date(lastEndTime);
      const endTime = new Date(startTime);
      endTime.setHours(startTime.getHours() + 8); // 每个班次8小时

      const shiftSchedule = new EmployeeShiftSchedule({
        shiftScheduleId: newShiftScheduleId,
        employeeId: employeeId,
        shiftType: currentShiftType,
        startTime: startTime,
        endTime: endTime,
      });

      await shiftSchedule.save();

      lastEndTime = endTime; // 更新lastEndTime为当前班次的结束时间

      const lastNumericPart = parseInt(newShiftScheduleId.slice(2));
      newShiftScheduleId = `SS${(lastNumericPart + 1).toString().padStart(4, '0')}`;

      // 判断下一个班次的类型
      if (currentShiftType === 'Morning') {
        currentShiftType = 'Evening';
      } else if (currentShiftType === 'Evening') {
        currentShiftType = 'Night';
      } else if (currentShiftType === 'Night') {
        currentShiftType = 'Morning';
        lastEndTime.setDate(lastEndTime.getDate() + 1); // 跨天的情况
        lastEndTime.setHours(shiftStartHours[currentShiftType], 0, 0, 0); // 确保新的开始时间从早班8:00开始
      }
    }

    res.status(201).json({ message: 'Shift schedule created successfully' });
  } catch (error) {
    console.error('Error generating shift schedule:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
}

module.exports = { generateMonthlyShiftSchedule };
