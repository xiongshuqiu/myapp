const jwt = require('jsonwebtoken');
const request = require('request');
const dotenv = require('dotenv');
dotenv.config();

const servicesConfig = require('../config/servicesConfig'); // 引入服务配置文件

// 中间件：验证Token
const authenticate = async (req, res, next) => {
  try {
    const token = req.cookies.jwt || req.cookies['auth-token'];
    if (!token) {
      console.log('Token not provided');
      return res.status(401).json({ message: 'Token not provided' });
    }

    const decodedToken = jwt.verify(token, process.env.JWT_SECRET || 'your_secret_key');
    req.user = decodedToken;
    res.locals._id = req.user._id;

    console.log('Decoded Token:', decodedToken);
    next();
  } catch (error) {
    console.error('Error verifying JWT:', error);
    const status = error.name === 'TokenExpiredError' ? 403 : 403;
    const message = error.name === 'TokenExpiredError' ? 'Token expired' : 'Invalid token';
    res.status(status).json({ message });
  }
};

// 中间件：生成子Token
const generateSubToken = (req, res, next) => {
  try {
    const decoded = req.user;

    const subToken = jwt.sign(
      { _id: decoded._id, role: decoded.role },
      process.env.NEW_JWT_SECRET,
      { expiresIn: '1h' }
    );

    req.headers['x-sub-token'] = subToken; //['x-sub-token'] 是请求头的名称

    console.log('Sub Token generated:', subToken);
    next();
  } catch (error) {
    console.error('Error generating sub token:', error);
    return res.status(500).send('Error generating sub token');
  }
};

// 中间件：转发请求到微服务
const forwardRequest = (req, res) => {
  const path = req.path.split('/')[2]; // 获取路径中的第二部分，作为服务名称
  const serviceName = `${path}-service`; // 拼接服务名称
  const targetServiceUrl = servicesConfig[serviceName]; // 从配置文件中获取目标服务URL

  if (!targetServiceUrl) {
    return res.status(404).send('Service not found');
  }

  // 配置转发选项
  const options = {
    url: `${targetServiceUrl}${req.url.replace(`/api/${path}`, '')}`, // 动态构造微服务地址
    method: req.method,
    headers: {
      ...req.headers, // 保留请求头，包括 x-sub-token
    },
    body: req.body,
    json: true,
  };

  // 转发请求
  request(options, (error, response, body) => {
    if (error) {
      console.error('Error forwarding request to microservice:', error);
      return res.status(500).send('Internal Server Error');
    }

    // 将微服务的响应返回给客户端
    res.status(response.statusCode).send(body);
  });
};

module.exports = { authenticate, generateSubToken, forwardRequest };
